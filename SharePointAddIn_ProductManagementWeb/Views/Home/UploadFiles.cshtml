
@{
    ViewBag.Title = "Upload Files";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="ms-Grid-row">
    <div class="ms-Grid-col ms-u-sm12 ms-u-md12 ms-u-lg12">
        <div class="ms-CommandBar ">
            <div class="ms-CommandBar-sideCommands">

                <div class="ms-CommandButton">
                    <button class="ms-CommandButton-button">
                        <span class="ms-CommandButton-icon ms-fontColor-themePrimary"><i class="ms-Icon ms-Icon--Contact"></i></span><span class="ms-CommandButton-label">@ViewBag.UserName</span>
                    </button>
                </div>
            </div>
            <div class="ms-CommandBar-mainArea">
                <div class="ms-SearchBox  ms-SearchBox--commandBar">
                    <input class="ms-SearchBox-field" type="text" value="">
                    <label class="ms-SearchBox-label">
                        <i class="ms-SearchBox-icon ms-Icon ms-Icon--Search"></i>
                        <span class="ms-SearchBox-text">Search</span>
                    </label>

                    <div class="ms-CommandButton ms-SearchBox-clear ms-CommandButton--noLabel  ">
                        <button class="ms-CommandButton-button">
                            <span class="ms-CommandButton-icon "><i class="ms-Icon ms-Icon--Cancel"></i></span><span class="ms-CommandButton-label"></span>
                        </button>
                    </div>

                    <div class="ms-CommandButton ms-SearchBox-exit ms-CommandButton--noLabel  ">
                        <button class="ms-CommandButton-button">
                            <span class="ms-CommandButton-icon "><i class="ms-Icon ms-Icon--ChromeBack"></i></span><span class="ms-CommandButton-label"></span>
                        </button>
                    </div>

                    <div class="ms-CommandButton ms-SearchBox-filter ms-CommandButton--noLabel  ">
                        <button class="ms-CommandButton-button">
                            <span class="ms-CommandButton-icon "><i class="ms-Icon ms-Icon--Filter"></i></span><span class="ms-CommandButton-label"></span>
                        </button>
                    </div>
                </div>

                <div class="ms-CommandButton">
                    <a class="ms-CommandButton-button" href="@Url.Action("Index", "Home")">
                        <span class="ms-CommandButton-icon ms-fontColor-themePrimary"><i class="ms-Icon ms-Icon--Table"></i></span><span class="ms-CommandButton-label">Overview</span>
                    </a>
                </div>

                <div class="ms-CommandButton">
                    <a class="ms-CommandButton-button" href="@Url.Action("New", "Home")">
                        <span class="ms-CommandButton-icon ms-fontColor-themePrimary"><i class="ms-Icon ms-Icon--Add"></i></span><span class="ms-CommandButton-label">New</span>
                    </a>
                </div>

                <div class="ms-CommandButton">
                    <a class="ms-CommandButton-button" href="@Url.Action("Edit", "Home")">
                        <span class="ms-CommandButton-icon ms-fontColor-themePrimary"><i class="ms-Icon ms-Icon--Edit"></i></span><span class="ms-CommandButton-label">Edit</span>
                    </a>
                </div>

                <div class="ms-CommandButton">
                    <a class="ms-CommandButton-button" href="@Url.Action("UploadFiles", "Home")">
                        <span class="ms-CommandButton-icon ms-fontColor-themePrimary"><i class="ms-Icon ms-Icon--Upload"></i></span><span class="ms-CommandButton-label">Upload Files</span>
                    </a>
                </div>

            </div>
        </div>
    </div>
</div>
<div class="ms-Grid-row">
    <div class="ms-Grid-col ms-u-sm12 ms-u-md12 ms-u-lg12">
        <div>
            <label>Product Code</label>
            <input id="productCode" type="text" name="productCode" value="0" />
            <label>Save in Document Set</label>
            <input id="useDocumentSet" type="checkbox" name="documentSet" value="" />
        </div>
        <h2>Upload Files</h2>

        <fieldset id="zone">
            <legend>Drop a file inside&hellip;</legend>
            <p>Or click here to <em>Browse</em>..</p>
        </fieldset>

        <div class="ms-ProgressIndicator" id="fileProgress">
            <div class="ms-ProgressIndicator-itemName"></div>
            <div class="ms-ProgressIndicator-itemProgress">
                <div class="ms-ProgressIndicator-progressTrack"></div>
                <div class="ms-ProgressIndicator-progressBar"></div>
            </div>
            <div class="ms-ProgressIndicator-itemDescription">Uploading file...</div>
        </div>

    </div>
</div>

@section scripts {
    <script src='~/Scripts/controls/filedrop-min.js'></script>
    <script type="text/javascript">
        var $fileProgress = $("#fileProgress");
        var progressIndicator = new fabric['ProgressIndicator']($fileProgress[0]);
        $fileProgress.hide();

        // Tell FileDrop we can deal with iframe uploads using this URL:
        var options = { iframe: { url: '/Home/UploadFileContent?SPHostUrl=@ViewBag.SPHostUrl' } };
        // Attach FileDrop to an area ('zone' is an ID but you can also give a DOM node):
        var zone = new FileDrop('zone', options);
        zone.multiple(true);

        // opt.input contains file input created by FileDrop:
        zone.opt.input.file.onchange = function (e) {
            // eventFiles() retrieve dropped File objects in
            // a cross-browser fashion:
            zone.eventFiles(e).each(function (file) {
                console.log(file.name + ' (' + file.size + ') bytes')
            })
        }

        // Do something when a user chooses or drops a file:
        zone.event('send', function (files) {
            // Depending on browser support files (FileList) might contain multiple items.
            files.each(function (file) {
                // React on successful AJAX upload:
                file.event('done', function (xhr) {
                    // 'this' here points to fd.File instance that has triggered the event.
                    console.log('Done uploading ' + this.name + ', response:\n\n' + xhr.responseText);
                    progressIndicator.setProgressPercent(1);
                    progressIndicator.setDescription("Done uploading file: " + this.name);
                    setTimeout(function () {
                        $fileProgress.hide();
                    }, 4000);
                });

                file.event('error', function (e, xhr) {
                    console.log("Failed upload: " + xhr.status + ', ' + xhr.statusText)

                    progressIndicator.setDescription("Failed to upload file: " + this.name);
                    setTimeout(function () {
                        $fileProgress.hide();
                    }, 4000);
                })

                // Reset the progress when a new upload starts:
                file.event('sendXHR', function () {
                    progressIndicator.setName(this.name);
                    progressIndicator.setProgressPercent(0.1);
                    progressIndicator.setDescription("Uploading file...");
                    $fileProgress.show();
                })

                file.event('progress', function (current, total) {
                    if (current === total) {
                        progressIndicator.setProgressPercent(0.5);

                        setTimeout(function () {
                            progressIndicator.setProgressPercent(0.7);
                        }, 5000);
                    }
                })

                var productCode = $("#productCode").val();
                var useDocumentSet = document.getElementById('useDocumentSet').checked;

                // Send the file:
                file.sendTo('/Home/UploadFileContent?SPHostUrl=@ViewBag.SPHostUrl&code=' + productCode + "&useSet=" + useDocumentSet);
            });
        });

        // React on successful iframe fallback upload (this is separate mechanism
        // from proper AJAX upload hence another handler):
        zone.event('iframeDone', function (xhr) {
            console.log('Done uploading via <iframe>, response:\n\n' + xhr.responseText);

            setTimeout(function () {
                $fileProgress.hide();
            }, 4000);
        });

    </script>
}
